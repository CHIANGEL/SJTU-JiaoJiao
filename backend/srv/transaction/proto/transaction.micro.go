// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: transaction.proto

package transaction

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Transaction service

type TransactionService interface {
	Create(ctx context.Context, in *TransactionCreateRequest, opts ...client.CallOption) (*TransactionCreateResponse, error)
	Update(ctx context.Context, in *TransactionUpdateRequest, opts ...client.CallOption) (*TransactionUpdateResponse, error)
	Find(ctx context.Context, in *TransactionFindRequest, opts ...client.CallOption) (*TransactionFindResponse, error)
}

type transactionService struct {
	c    client.Client
	name string
}

func NewTransactionService(name string, c client.Client) TransactionService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "transaction"
	}
	return &transactionService{
		c:    c,
		name: name,
	}
}

func (c *transactionService) Create(ctx context.Context, in *TransactionCreateRequest, opts ...client.CallOption) (*TransactionCreateResponse, error) {
	req := c.c.NewRequest(c.name, "Transaction.Create", in)
	out := new(TransactionCreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionService) Update(ctx context.Context, in *TransactionUpdateRequest, opts ...client.CallOption) (*TransactionUpdateResponse, error) {
	req := c.c.NewRequest(c.name, "Transaction.Update", in)
	out := new(TransactionUpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionService) Find(ctx context.Context, in *TransactionFindRequest, opts ...client.CallOption) (*TransactionFindResponse, error) {
	req := c.c.NewRequest(c.name, "Transaction.Find", in)
	out := new(TransactionFindResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Transaction service

type TransactionHandler interface {
	Create(context.Context, *TransactionCreateRequest, *TransactionCreateResponse) error
	Update(context.Context, *TransactionUpdateRequest, *TransactionUpdateResponse) error
	Find(context.Context, *TransactionFindRequest, *TransactionFindResponse) error
}

func RegisterTransactionHandler(s server.Server, hdlr TransactionHandler, opts ...server.HandlerOption) error {
	type transaction interface {
		Create(ctx context.Context, in *TransactionCreateRequest, out *TransactionCreateResponse) error
		Update(ctx context.Context, in *TransactionUpdateRequest, out *TransactionUpdateResponse) error
		Find(ctx context.Context, in *TransactionFindRequest, out *TransactionFindResponse) error
	}
	type Transaction struct {
		transaction
	}
	h := &transactionHandler{hdlr}
	return s.Handle(s.NewHandler(&Transaction{h}, opts...))
}

type transactionHandler struct {
	TransactionHandler
}

func (h *transactionHandler) Create(ctx context.Context, in *TransactionCreateRequest, out *TransactionCreateResponse) error {
	return h.TransactionHandler.Create(ctx, in, out)
}

func (h *transactionHandler) Update(ctx context.Context, in *TransactionUpdateRequest, out *TransactionUpdateResponse) error {
	return h.TransactionHandler.Update(ctx, in, out)
}

func (h *transactionHandler) Find(ctx context.Context, in *TransactionFindRequest, out *TransactionFindResponse) error {
	return h.TransactionHandler.Find(ctx, in, out)
}
